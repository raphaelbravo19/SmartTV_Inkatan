//GlobalStateManager
class State {
    name;
    messageCallbacks;
    mapBlockedActions;
    constructor(name) {
      this.name = name;
      this.messageCallbacks = {};
      this.blockedActions = {};
    }
    addBlockedAction(message) {
      this.mapBlockedActions[message] = true;
      return true;
    }
    
    removeBlockedAction(message) {
      delete this.mapBlockedActions[message];
      return true;
    }
    
    addBlockedActions(messages) {
      messages.map(message => {
        this.mapBlockedActions[message] = true;
      });
  
      return true;
    }
    
    removeBlockedActions(messages) {
      messages.map(message => {
        delete this.mapBlockedActions[message];
      });
  
      return true;
    }
    
    
    clearBlockedActions() {
      this.mapBlockedActions = {};
      return true;
    }
  
    printContent() {
      console.log(
        this.name + ":" + JSON.stringify(Object.keys(this.messageCallbacks))
      );
      return {
        state: this.name,
        callbacks: Object.keys(this.messageCallbacks)
      };
    }
    addListener(callbackType, callback) {
      var exist = true;
      if (this.messageCallbacks[callbackType] != null) {
        exist = false;
      }
      this.messageCallbacks[callbackType] = callback;
      return exist;
    }
  }
  
  /**
   * GlobalState
   * You can manage all the actions executed.
   * Group all the messages in states and makes easier asign actions to each message and execute it.
   *
   * @example
   * const globalstate = new GlobalState(
   *    ["WELCOME","MENU","HELP","GAME"] // Initial States
   * )
   * @todo Initialize a GlobalState
   */
  
  class GlobalState {
    states;
    currentState;
    mapStates;
    stateControllers;
    mapBlockedActions;
    /**
     * @param {String[]} initialstates Initial list of states
     */
    constructor(initialStates) {
      this.mapStates = {};
      this.stateControllers = [];
      this.states = [];
      this.mapBlockedActions = {};
      if (initialStates != null) {
        initialStates.map((st, i) => {
          this.mapStates[st] = i;
          this.states.push(st);
          this.stateControllers.push(new State(st));
        });
      }
    }
  
    /**
     * Add a new state, it represent a context inside the application
     * You can add it messages that can execute his own actions
     * @param {String} nameState New state name
     * @return {Boolean} It returns false in case the state already exists
     *
     * @example
     * var creado = globalstate.addState("FIGHT")
     * @todo Create a new state
     *
     */
    addState(nameState) {
      if (this.mapStates[nameState] == null) {
        this.states.push(nameState);
        this.mapStates[nameState] = this.states.length - 1;
        this.stateControllers.push(new State(nameState));
        console.log("State succesfully added: " + nameState);
        return true;
      } else {
        console.log("This state: " + nameState + " already exists");
        return false;
      }
    }
  
    /**
     * It select a state as current. All the actions grouped in this state will be available to execute
     * @param {String} currentState State name
     * @return {Boolean} It returns false in case the state doesn't exist
     *
     * @example
     * var setted = globalstate.setCurrentState("MENU")
     * @todo Select a status as current
     *
     */
    setCurrentState(currentState) {
      if (this.mapStates[currentState] == null) {
        console.log("This state: " + currentState + " doesn't exists");
        return false;
      } else {
        this.currentState = currentState;
        console.log("State succesfully changed: " + currentState);
        return true;
      }
    }
    /**
     * @typedef {StateInfo} StateInfo Status information
     *
     * @property {String} state State name
     * @property {String[]} callbacks List of messages asigned to this state
     */
  
    /**
     * @typedef {GlobalInfo} GlobalInfo Global Information
     *
     * @property {StateInfo[]} states Every state information
     * @property {String} currentState Current State
     */
    /**
     * It returns the current information of the Global State
     * @return {GlobalInfo} Complete information of GlobalState
     *
     * @example
     * var globinfo = globalstate.printContent()
     * @todo Know the current information of Global State
     */
    printContent() {
      console.log("States: " + this.states);
      var list = this.stateControllers.map(x => x.printContent());
      console.log("MapStates: " + JSON.stringify(this.mapStates));
      console.log("CurrentState: " + this.currentState);
      return {
        states: list,
        currentState: this.currentState
      };
    }
    /**
     * Add a new action to the state. This only will be able to execute if the application is in the current state
     * @param {String} state State name to asign the action
     * @param {String} callbackType Action name
     * @param {Function} callback Function that will be executed when the application receive the action name
     *
     * @return {Boolean} It returns false in case the state doesn't exist
     * @example
     * var added = globalstate.addListenertoState("FIGHT","PUNCH",function(params){
     *    console.log("punch executed")
     * })
     * @todo Add a new action to the state
     */
    addListenertoState(state, callbackType, callback) {
      if (this.mapStates[state] == null) {
        console.log("This state: " + state + " doesn't exists");
        return false;
      } else {
        console.log("Listener succesfully added: " + state + "-" + callbackType);
        return this.stateControllers[this.mapStates[state]].addListener(
          callbackType,
          callback
        );
      }
    }
    /**
     * Execute an action. This only will be able to execute if the application is in the current state
     * @param {Object} actionObject Action information
     * @param {String} actionObject.action Nombre de la accion
     * @param {Object} actionObject.params Parametros extras para la funcion
     *
     * @return {Boolean} Retorna falso en caso la accion no exista en el estado actual
     * @example
     * var executed = globalstate.execute({
     *    action: "PUNCH",
     *    params:{
     *      speed: 50,
     *      strength: 24
     *    }
     * })
     * @todo Ejecuta la accion correspondiente
     */
    execute(actionObject) {
      console.log(actionObject);
      try {
        if (this.mapBlockedActions[actionObject["action"]] == null) {
          if(this.stateControllers[
            this.mapStates[this.currentState]
          ].mapBlockedActions[actionObject["action"]] == null){
          this.stateControllers[
            this.mapStates[this.currentState]
          ].messageCallbacks[actionObject["action"]](actionObject);
          return true;
        }else{
          return false;
        }
          
        } else return false;
      } catch (e) {
        console.log("Action in " + this.currentState + " doesn't exist");
        return false;
      }
    }
  
    /**
     * Bloquea la ejecucion de la accion, en caso se encuentre bloqueada una accion no podra ser ejecutada.
     * @param {String} message Nombre de la accion
     *
     * @return {Boolean} Retorna falso en caso no exista la accion en el contexto actual
     * @example
     * var blocked = globalstate.addBlockedAction("JUMP")
     * @todo Bloquea la ejecucion de una accion
     */
    addBlockedAction(message) {
      this.mapBlockedActions[message] = true;
      return true;
    }
    /**
     * Activa la ejecucion de una accion previamente bloqueada, la accion podra ser ejecutada
     * @param {String} message Nombre de la accion
     *
     * @return {Boolean} Retorna falso en caso no exista la accion en el contexto actual
     * @example
     * var allowed = globalstate.removeBlockedAction("JUMP")
     * @todo Activa nuevamente la ejecucion de una accion
     */
    removeBlockedAction(message) {
      delete this.mapBlockedActions[message];
      return true;
    }
    /**
     * Bloquea la ejecucion de las acciones, las acciones bloqueada una accion no podran ser ejecutadas.
     * @param {String[]} messages Nombre de la accion
     *
     * @return {Boolean} Retorna falso en caso alguna accion no exista en el contexto actual
     * @example
     * var blocked = globalstate.addBlockedActions(["JUMP","WALK"])
     * @todo Bloquea la ejecucion de las acciones
     */
    addBlockedActions(messages) {
      messages.map(message => {
        this.mapBlockedActions[message] = true;
      });
  
      return true;
    }
    /**
     * Activa la ejecucion de las acciones previamente bloqueadas, las acciones podran ser ejecutadas
     * @param {String[]} messages Lista de accion
     *
     * @return {Boolean} Retorna falso en caso alguna accion no exista en el contexto actual
     * @example
     * var blocked = globalstate.removeBlockedActions(["JUMP","WALK"])
     * @todo Activa nuevamente la ejecucion de las acciones
     */
    removeBlockedActions(messages) {
      messages.map(message => {
        delete this.mapBlockedActions[message];
      });
  
      return true;
    }
    
    /**
     * Desbloquea todas las acciones previamente bloqueadas
     *
     * @return {Boolean} Retorna falso si falla la ejecucion
     * @example
     * var cleared = globalstate.clearBlockedActions()
     * @todo Desbloquea la acciones bloqueadas
     */
    clearBlockedActions() {
      this.mapBlockedActions = {};
      return true;
    }
    /**
     * Bloquea la ejecucion de la accion en un estado especifico, en caso se encuentre bloqueada una accion no podra ser ejecutada.
     * @param {String} message Nombre de la accion
     *
     * @return {Boolean} Retorna falso en caso no exista la accion en el contexto actual
     * @example
     * var blocked = globalstate.addBlockedActionInState("START","JUMP")
     * @todo Bloquea la ejecucion de una accion en un estado especifico
     */
    addBlockedActionInState(state,message) {
      if (this.mapStates[state] == null) {
        console.log("This state: " + state + " doesn't exists");
        return false;
      } else {
        console.log("Added in: " + state );
        this.stateControllers[this.mapStates[state]].addBlockedAction(message);
        return true;
      }
    }
    /**
     * Activa la ejecucion de una accion previamente bloqueada en un estado especifico, la accion podra ser ejecutada
     * @param {String} message Nombre de la accion
     *
     * @return {Boolean} Retorna falso en caso no exista la accion en el contexto actual
     * @example
     * var allowed = globalstate.removeBlockedActionInState("START","JUMP")
     * @todo Activa nuevamente la ejecucion de una accion en un estado especifico
     */
    removeBlockedActionInState(state,message) {
      if (this.mapStates[state] == null) {
        console.log("This state: " + state + " doesn't exists");
        return false;
      } else {
        console.log("Added in: " + state );
        this.stateControllers[this.mapStates[state]].removeBlockedAction(message);
        return true;
      }
    }
    /**
     * Bloquea la ejecucion de las acciones en un estado especifico, las acciones bloqueada una accion no podran ser ejecutadas.
     * @param {String[]} messages Nombre de la accion
     *
     * @return {Boolean} Retorna falso en caso alguna accion no exista en el contexto actual
     * @example
     * var blocked = globalstate.addBlockedActionsInState("START",["JUMP","WALK"])
     * @todo Bloquea la ejecucion de las acciones en un estado especifico 
     */
    addBlockedActionsInState(state,messages) {
      if (this.mapStates[state] == null) {
        console.log("This state: " + state + " doesn't exists");
        return false;
      } else {
        console.log("Added in: " + state );
        this.stateControllers[this.mapStates[state]].addBlockedActions(messages);
        return true;
      }
    }
    /**
     * Activa la ejecucion de las acciones previamente bloqueadas en un estado especifico, las acciones podran ser ejecutadas
     * @param {String[]} messages Lista de accion
     *
     * @return {Boolean} Retorna falso en caso alguna accion no exista en el contexto actual
     * @example
     * var blocked = globalstate.removeBlockedActionsInState("START",["JUMP","WALK"])
     * @todo Activa nuevamente la ejecucion de las acciones en un estado especifico
     */
    removeBlockedActionsInState(state,messages) {
      if (this.mapStates[state] == null) {
        console.log("This state: " + state + " doesn't exists");
        return false;
      } else {
        console.log("Removed in: " + state );
        this.stateControllers[this.mapStates[state]].removeBlockedActions(messages);
        return true;
      }
    }
    
    /**
     * Desbloquea todas las acciones previamente bloqueadas en un estado especifico
     *
     * @return {Boolean} Retorna falso si falla la ejecucion
     * @example
     * var cleared = globalstate.clearBlockedActionsInState("START")
     * @todo Desbloquea la acciones bloqueadas en un estado especifico
     */
    clearBlockedActionsInState(state) {
      if (this.mapStates[state] == null) {
        console.log("This state: " + state + " doesn't exists");
        return false;
      } else {
        console.log("Cleared : " + state );
        this.stateControllers[this.mapStates[state]].clearBlockedActions();
        return true;
      }
    }
  }

  